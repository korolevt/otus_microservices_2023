---
# Source: hw5-auth-app/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.8.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgres-password: "MkR6WVlINHdWeg=="
  password: "cHdk"
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: hw5-auth-app/templates/config.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hw5-auth-app-secret
type: Opaque
data:
  postgres_user: dXNy
  postgres_password: cHdk
  postgres_database: dXNlcl9kYg==

  JWT_SECRET: MTIz
---
# Source: hw5-auth-app/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql-hl
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.8.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: primary
---
# Source: hw5-auth-app/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.8.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: primary
---
# Source: hw5-auth-app/templates/app.yaml
apiVersion: v1
kind: Service
metadata:
  name: hw5-auth-app-service
spec:
  selector:
    app: hw5-auth-app-application
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 80
  type: LoadBalancer
---
# Source: hw5-auth-app/templates/app.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hw5-auth-app-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hw5-auth-app-application
  template:
    metadata:
      labels:
        app: hw5-auth-app-application
    spec:
      containers:
        - name: hw5-auth-app
          image: tvv766/hw5-auth-app:latest
          ports:
            - name: http
              containerPort: 80
          livenessProbe:
            periodSeconds: 10
            httpGet:
              path: /actuator/health/liveness
              port: http
          readinessProbe:
            periodSeconds: 10
            httpGet:
              path: /actuator/health/readiness
              port: http
          startupProbe:
            failureThreshold: 25
            periodSeconds: 10
            httpGet:
              path: /actuator/health
              port: http
          env:
            - name: DB_HOST   
              value: "release-name-postgresql"
            - name: DB_NAME # Setting Database username from Secret
              valueFrom:
                secretKeyRef:
                  name: hw5-auth-app-secret 
                  key: postgres_database
            - name: POSTGRES_USER  # Setting Database username from Secret
              valueFrom:
                secretKeyRef:
                  name: hw5-auth-app-secret 
                  key: postgres_user
            - name: POSTGRES_PASSWORD # Setting Database password from Secret
              valueFrom:
                secretKeyRef:
                  name: hw5-auth-app-secret
                  key: postgres_password

            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  key: JWT_SECRET
                  name: hw5-auth-app-secret

            - name: APP_PORT
              value: "80"

            - name: USER_SERVICE
              value: http://hw5-user-app-service.default.svc.cluster.local:8000
---
# Source: hw5-auth-app/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.8.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: release-name-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: release-name-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-12.8.0
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:15.3.0-debian-11-r77
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "usr"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: password
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgres-password
            - name: POSTGRES_DATABASE
              value: "user_db"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "usr" -d "dbname=user_db" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "usr" -d "dbname=user_db" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: hw5-auth-app/templates/postgres-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: "release-name"
  labels:
    helm.sh/chart: "hw5-auth-app-0.1.0"
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name: "release-name"
      labels:
        helm.sh/chart: "hw5-auth-app-0.1.0"	
    spec:
      containers:
        - name: post-install-job
          image: postgres:latest
          command:
            - sh
            - "-c"
            - |
              psql -a << 'EOF'
                  DROP TABLE IF EXISTS sessions;
                  CREATE TABLE IF NOT EXISTS sessions(
                     id uuid UNIQUE PRIMARY KEY,
                     user_id INTEGER,
                     user_name VARCHAR (50),
                     expires_in timestamp);                
              EOF
          env:
            - name: PGHOST
              value: "release-name-postgresql"
            - name: PGUSER 
              valueFrom:
                secretKeyRef:
                  name: hw5-auth-app-secret 
                  key: postgres_user
            - name: PGPASSWORD 
              valueFrom:
                secretKeyRef:
                  name: hw5-auth-app-secret
                  key: postgres_password
            - name: PGDATABASE 
              valueFrom:
                secretKeyRef:
                  name: hw5-auth-app-secret 
                  key: postgres_database
      restartPolicy: OnFailure
