{
	"info": {
		"_postman_id": "82ab83b8-222d-4a31-a4d8-8617336cc22a",
		"name": "PR",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Registration",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//pm.collectionVariables.set(\"login\", pm.variables.replaceIn('{{$randomUserName}}'))",
							"//pm.collectionVariables.set(\"firstName\", pm.variables.replaceIn('{{$randomFirstName}}'))",
							"//pm.collectionVariables.set(\"lastName\", pm.variables.replaceIn('{{$randomLastName}}'))",
							"//pm.collectionVariables.set(\"password\", pm.variables.replaceIn('{{$randomLastName}}'))"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.status == 201) {\r",
							"    pm.collectionVariables.set('password', pm.response.json().password);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"login\": \"{{login}}\",\n    \"password\": \"{{password}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"email\" : \"{{email}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/register",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.collectionVariables.set('accessToken', pm.response.json().accessToken);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"login\": \"{{login}}\",\n    \"password\": \"{{password}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Deposit billing account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Положили деньги (1000))', () => {",
							"    pm.expect(pm.response.json().balance).to.eq(",
							"        pm.collectionVariables.get('amount')",
							"    )",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set('amount', 1000)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"amount\": {{amount}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/billing/deposit",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"billing",
						"deposit"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get account balance after deposit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Проверка сколько денег на счету, должно быть - 1000', () => {\r",
							"    pm.response.to.have.status(200)\r",
							"    pm.expect(pm.response.json().balance).eq(1000)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/billing/balance",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"billing",
						"balance"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create order success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Создание заказа (стоимостью 500) - хватает денег, осталось 500\", () => {",
							"    pm.response.to.have.status(201)",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "IdempotencyKey",
						"value": "",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"location_id\" : 2,\n   \"excursion_id\" : 3, \n   \"start\": \"2024-09-09T13:00:00Z\",\n   \"count\": 1\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check notifications after order success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Проверка количество полученных уведомлений - успешный заказ', () => {",
							"    pm.expect(pm.response.json().count()).eq(1)",
							"    console.log(\"1 уведомление\")",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"setTimeout(() => {}, 5000)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/notifications",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"notifications"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create order fail",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Создание заказа стоимостью 5000 (10 билетов по 500)) - не хватает денег', () => {",
							"    pm.response.to.have.status(500)",
							"    //pm.expect(pm.response.json().message).equal('Not enough money')",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "IdempotencyKey",
						"value": "",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"location_id\" : 2,\n   \"excursion_id\" : 3, \n   \"start\": \"2024-09-09T13:00:00Z\",\n   \"count\": 10\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get account balance after failed order creation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Проверка сколько осталось денег, после попытки создать заказ (стоимостью 5000), должно остаться без изменений - 500', () => {",
							"    pm.response.to.have.status(200)",
							"    pm.expect(pm.response.json().balance).eq(500)",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/billing/balance",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"billing",
						"balance"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check notifications after order failed",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Проверка количество полученных уведолений - успешный и не успешый заказ', () => {",
							"    pm.response.to.have.status(200)",
							"    //pm.expect(pm.response.json().count()).eq(2)",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"setTimeout(() => {}, 2000)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/notifications",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"notifications"
					]
				}
			},
			"response": []
		},
		{
			"name": "Excursion Cancellation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Создание заказа (стоимостью 500) - хватает денег, осталось 500\", () => {",
							"    pm.response.to.have.status(200)",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"location_id\" : 2,\n   \"excursion_id\" : 3, \n   \"start\": \"2024-09-09T13:00:00Z\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders/excursionCancellation",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders",
						"excursionCancellation"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get account balance after excursion cancellation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Проверка сколько денег на счету, должно быть - 1000 (вернули 500)', () => {\r",
							"    pm.response.to.have.status(200)\r",
							"    pm.expect(pm.response.json().balance).eq(1000)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/billing/balance",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"billing",
						"balance"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://arch.homework:9088"
		},
		{
			"key": "login",
			"value": "user1"
		},
		{
			"key": "firstName",
			"value": "firstname"
		},
		{
			"key": "lastName",
			"value": "lastname"
		},
		{
			"key": "email",
			"value": "user1@example.com"
		},
		{
			"key": "password",
			"value": "passwd1"
		},
		{
			"key": "accessToken",
			"value": ""
		},
		{
			"key": "accountID",
			"value": ""
		},
		{
			"key": "deposit",
			"value": ""
		},
		{
			"key": "amount",
			"value": ""
		}
	]
}